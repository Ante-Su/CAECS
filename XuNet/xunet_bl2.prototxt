# Enter your network definition here.
# Use Shift+Enter to update the visualization.
name: "xunet_bl2"
layer {
  name: "stegdata"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  #transform_param{
  #  crop_size:256
  #}
  data_param {
    source: "/home1/suante/data/BOSS/spatial/512/sun300/train_lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "stegdata"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  #transform_param{
  #  crop_size:256
  #}
  data_param {
    source: "/home1/suante/data/BOSS/spatial/512/sun300/val_lmdb"
    batch_size: 10
    backend: LMDB
  }
}
layer {
  name: "HPF"
  type: "Convolution"
  bottom: "data"
  top: "HPF"
  convolution_param {
    num_output: 1
    bias_term: false
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "static"
    }
  }
}
layer {
  name: "group1_conv"
  type: "Convolution"
  bottom: "HPF"
  top: "group1_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  propagate_down: false
  convolution_param {
    num_output: 8
    bias_term: false
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "group1_ABS"
  type: "AbsVal"
  bottom: "group1_conv"
  top: "group1_ABS"
}
layer {
  name: "group1_BN"
  type: "BatchNorm"
  bottom: "group1_ABS"
  top: "group1_ABS"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "group1_scale_conv"
  type: "Scale"
  bottom: "group1_ABS"
  top: "group1_ABS"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "group1_tanH"
  type: "TanH"
  bottom: "group1_ABS"
  top: "group1_tanH"
}
layer {
  name: "group1_pool"
  type: "Pooling"
  bottom: "group1_tanH"
  top: "group1_pool"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 2
    pad: 1
  }
}
layer {
  name: "group2_conv"
  type: "Convolution"
  bottom: "group1_pool"
  top: "group2_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    bias_term: false
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "group2_BN"
  type: "BatchNorm"
  bottom: "group2_conv"
  top: "group2_conv"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "group2_scale_conv"
  type: "Scale"
  bottom: "group2_conv"
  top: "group2_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "group2_tanH"
  type: "TanH"
  bottom: "group2_conv"
  top: "group2_tanH"
}
layer {
  name: "group2_pool"
  type: "Pooling"
  bottom: "group2_tanH"
  top: "group2_pool"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 2
    pad: 1
  }
}
layer {
  name: "group3_conv"
  type: "Convolution"
  bottom: "group2_pool"
  top: "group3_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "group3_BN"
  type: "BatchNorm"
  bottom: "group3_conv"
  top: "group3_conv"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "group3_scale_conv"
  type: "Scale"
  bottom: "group3_conv"
  top: "group3_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "group3_relu"
  type: "ReLU"
  bottom: "group3_conv"
  top: "group3_conv"
}
layer {
  name: "group3_pool"
  type: "Pooling"
  bottom: "group3_conv"
  top: "group3_pool"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 2
    pad: 1
  }
}
layer {
  name: "group4_conv"
  type: "Convolution"
  bottom: "group3_pool"
  top: "group4_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "group4_BN"
  type: "BatchNorm"
  bottom: "group4_conv"
  top: "group4_conv"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "group4_scale_conv"
  type: "Scale"
  bottom: "group4_conv"
  top: "group4_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "group4_relu"
  type: "ReLU"
  bottom: "group4_conv"
  top: "group4_conv"
}
layer {
  name: "group4_pool"
  type: "Pooling"
  bottom: "group4_conv"
  top: "group4_pool"
  pooling_param {
    pool: AVE
    kernel_size: 7
    stride: 2
    pad: 2
  }
}
layer {
  name: "group5_conv"
  type: "Convolution"
  bottom: "group4_pool"
  top: "group5_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "group5_BN"
  type: "BatchNorm"
  bottom: "group5_conv"
  top: "group5_conv"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "group5_scale_conv"
  type: "Scale"
  bottom: "group5_conv"
  top: "group5_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "group5_relu"
  type: "ReLU"
  bottom: "group5_conv"
  top: "group5_conv"
}
####################ensemble##################
layer {
  name: "split1_conv"
  type: "Convolution"
  bottom: "group5_conv"
  top: "split1_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "split1_BN"
  type: "BatchNorm"
  bottom: "split1_conv"
  top: "split1_conv"
  batch_norm_param {
    use_global_stats: false
  }
}
layer {
  name: "split1_scale_conv"
  type: "Scale"
  bottom: "split1_conv"
  top: "split1_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "split1_relu"
  type: "ReLU"
  bottom: "split1_conv"
  top: "split1_conv"
}
layer {
  name: "split2_conv"
  type: "Convolution"
  bottom: "group5_conv"
  top: "split2_conv"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "split2_BN"
  type: "BatchNorm"
  bottom: "split2_conv"
  top: "split2_conv"
  batch_norm_param {
    use_global_stats: false
  }
}   
layer {
  name: "split2_scale_conv"
  type: "Scale"
  bottom: "split2_conv"
  top: "split2_conv"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "split2_relu"
  type: "TanH"
  bottom: "split2_conv"
  top: "split2_conv"
}

#####################combine########################
layer {
  name: "split1_pool"
  type: "Pooling"
  bottom: "split1_conv"
  top: "split1_pool"
  pooling_param {
    pool: AVE
    kernel_size: 32
    stride: 32
  }
}
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "split1_pool"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "split2_pool"
  type: "Pooling"
  bottom: "split2_conv"
  top: "split2_pool"
  pooling_param {
    pool: AVE
    kernel_size: 32
    stride: 32
  }
}

layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "split2_pool"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer{
  bottom:"fc1" bottom:"fc2" top:"ensemble"
  type:"Concat"
  concat_param{
    axis:1
  }
}
layer {
  name: "fc"
  type: "InnerProduct"
  bottom: "ensemble"
  top: "fc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc"
  bottom: "label"
  top: "loss"
}
